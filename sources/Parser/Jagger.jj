
// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; }

// Fonction principale
PARSER_BEGIN(Jagger)
public class Jagger
{
    public static void main(String args[]) throws ParseException
    {
        Jagger parser = new Jagger(System.in);
        parser.mainloop();
    }
}
PARSER_END(Jagger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" }

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >  // A decimal number.
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
|   < EOL: "\n" >                             // End of line.
|   < PRINT : "print">
|   < LRB : "(">
|   < RRB : ")">

|   < IF : "if">
|   < THEN : "then">
|   < ELSE : "else">
}

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ (expression <EOL>)* <EOF>
void mainloop():
{ Exp a; }
{
    (
      a=printScope() <EOL> { 
                             System.out.println(a.accept(new VisitorEval())); }
    )*
    <EOF>
}


Exp ifScope():
{ Exp ifExp, thenExp, elseExp; }
{
	(<IF> ifExp=cond() <THEN> thenExp=cond() <ELSE> elseExp=cond() { return new IfThenElse(ifExp, thenExp, elseExp); }
	| ifExp=cond()) { return ifExp; }
}


//fonction print 
Exp printScope():
{Exp e;}
{
    <PRINT><LRB> e=cond() <RRB> {return new Print(e);}
    | e=ifScope() {return e;}
}

// Expression (the axiom).
// E -> T ('+'T | '-'T)*
Exp expression():
{ Exp a,b; }
{
    a=term()
    (
      "+" b=term() { return new Add(a,b); }
    | "-" b=term() { return new Sub(a,b); }
    )? { return a; }
}



// Condition 
// 
Exp cond():
{ Exp a,b; }
{
    a=expression()
    (
      ">" b=expression() { return new Sup(a,b); }
    | "<" b=expression() { return new Inf(a,b); }
    | ">=" b=expression() { return new SupEqual(a,b); }
    | "<=" b=expression() { return new InfEqual(a,b); }
    | "=" b=expression() { return new Equal(a,b); }
    | "<>" b=expression() { return new NotEqual(a,b); }
    )? { return a; }
}

// Term.
// T -> F ('*'F | '/'F)*
Exp term():
{ Exp a,b; }
{
    a=Unary()
    (
      "*" b=Unary() { return new Mul(a,b);  }
    | "/" b=Unary() { return new Div(a,b);  }
    )* { return a; }
}

Exp Unary():
{ Exp a; }
{
   
    (
     "+" a=factor() { return new Plus(a); }
    | "-" a=factor() { return new Minus(a);  }
    |a=factor()
    ) {return a;}
}


// Factor of an expression.
// F -> <NUMBER> | "(" E ")"
Exp factor():
{ Token t; Exp e; }
{
      t=<NUMBER> { return new Num(Double.parseDouble(t.toString())); }
    | "(" e=expression() ")" { return e; }
}

